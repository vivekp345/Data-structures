#include<stdio.h>
#include<string.h>
#define MAX 100

 char infix[20],postfix[20],stack[MAX];
 int top=-1;
 infixtopostfix()
 {
 int i,j;
 for(i=0;i<strlen(infix);i++)
 switch infix(i)
 {
 case'(':
  push(infix[i]);
  break;
  
  case')':
  while((next=pop())!='(');
  {
postfix[j]=next;
j++;
}
break;

  case'+':
  case'-':
  case'*':
  case'/':
  while(!isempty&&
}
pre(char op)
{
switch op
{
case'^':
return 3;
break;
  
  case'^':op == '*' || op == '/') return 2;
    return 0;
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

void infixToPostfix(char* infix, char* postfix) {
    int i, k = 0;
    for (i = 0; infix[i]; ++i) {
        if (isalnum(infix[i])) {
            postfix[k++] = infix[i];
        } else if (infix[i] == '(') {
            push(infix[i]);
        } else if (infix[i] == ')') {
            while (peek() != '(')
                postfix[k++] = pop();
            pop(); // Discard the '('
        } else { // Operator
            while (precedence(infix[i]) <= precedence(peek()) && peek() != '(')
                postfix[k++] = pop();
            push(infix[i]);
        }
    }

    while (top != -1)
        postfix[k++] = pop();

    postfix[k] = '\0';
}

int main() {
    char infix[MAX_SIZE];
    char postfix[MAX_SIZE];

    printf("Enter infix expression: ");
    fgets(infix, MAX_SIZE, stdin);
    infix[strlen(infix) - 1] = '\0'; // Removing newline character

    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

    return 0;
}

return 3;
break;

case'+':
case'-':
return 3;
break;

}
{


}
 int main()
 {
 printf("enter the expresssion");
 scanf("%s",infix);
 infixtopostfix();
 
 }
